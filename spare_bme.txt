    // Initialize the BME680
    gas_sensor.dev_id = BME680_I2C_ADDR_PRIMARY;
    gas_sensor.intf = BME680_I2C_INTF;
    gas_sensor.read = bme680_user_i2c_read;
    gas_sensor.write = bme680_user_i2c_write;
    gas_sensor.delay_ms = bme680_user_delay_ms;
    /* amb_temp can be set to 25 prior to configuring the gas sensor 
     * or by performing a few temperature readings without operating the gas sensor.
     */
    gas_sensor.amb_temp = 25;

    int8_t rslt = BME680_OK;
    //rslt = bme680_init(&gas_sensor);

    gas_sensor.tph_sett.os_hum = BME680_OS_2X;
    gas_sensor.tph_sett.os_pres = BME680_OS_4X;
    gas_sensor.tph_sett.os_temp = BME680_OS_8X;
    gas_sensor.tph_sett.filter = BME680_FILTER_SIZE_3;

    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
    /* Create a ramp heat waveform in 3 steps */
    gas_sensor.gas_sett.heatr_temp = 320; /* degree Celsius */
    gas_sensor.gas_sett.heatr_dur = 150; /* milliseconds */

    /* Select the power mode */
    /* Must be set before writing the sensor configuration */
    gas_sensor.power_mode = BME680_FORCED_MODE; 

    /* Set the required sensor settings needed */
    set_required_settings = BME680_OST_SEL | BME680_OSP_SEL | BME680_OSH_SEL | BME680_FILTER_SEL 
        | BME680_GAS_SENSOR_SEL;

    /* Set the desired sensor configuration */
    //rslt = bme680_set_sensor_settings(set_required_settings,&gas_sensor);

    /* Set the power mode */
    //rslt = bme680_set_sensor_mode(&gas_sensor);

    uint16_t meas_period;
    bme680_get_profile_dur(&meas_period, &gas_sensor);

    bme680_user_delay_ms(meas_period); // Delay until measurement is ready

    //rslt = bme680_get_sensor_data(&data, &gas_sensor);

    // User I2C/TWI read, for the BME680
int8_t bme680_user_i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
    int8_t rslt = 0; // 0 for success, 1 for failure, based on BME680 open API
    m_xfer_done = false;

    ret_code_t err_code = nrf_drv_twi_tx(&m_twi, dev_id, &reg_addr, 1, true);
    if(err_code == NRF_SUCCESS)
    {
      err_code = nrf_drv_twi_rx(&m_twi, dev_id, reg_data, len);
    }
    
    APP_ERROR_CHECK(err_code);

    return rslt;

}

// User I2C/TWI write, for the BME680
int8_t bme680_user_i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len)
{
    int8_t rslt = 0; // 0 for success, 1 for failure, based on BME680 open API
    uint8_t data_payload[sizeof(reg_data)];
    const uint8_t *p_data;

    m_xfer_done = false;

    // copy in the required data to the payload
    data_payload[0] = reg_addr;
    for(uint32_t i = 1; i < len+1; i++)
    {
      data_payload[i] = reg_data[i-1];
    }

    // Assign the pointer to the array
    p_data = data_payload;

    ret_code_t err_code = nrf_drv_twi_tx(&m_twi, dev_id, p_data, (len+1), false);

    APP_ERROR_CHECK(err_code);

    return rslt;

}

void bme680_user_delay_ms(uint32_t period)
{
    /*
     * Return control or wait,
     * for a period amount of milliseconds
     */

    nrf_delay_ms(period);
     

}